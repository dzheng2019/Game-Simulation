globals [
  percent-altruist  ;percent of population that is altruistic
  percent-egoist  ;percent of population that is egoistic
  percent-tit ;percent of population that plays reciprocal altruism, a modified version of tit-for-tat
  density-death ;toggles death rate being dependent on density
  mutation ;toggles if mutation happens
  perfect-recall ;toggles if tit-for-tat players have perfect recall

  ;all colors used in the game
  ;Format: (Strategy)-c-(Group)
  alt-c-g0
  alt-c-g1
  alt-c-g2
  alt-c-g3
  ego-c-g0
  ego-c-g1
  ego-c-g2
  ego-c-g3
  tit-c-g0
  tit-c-g1
  tit-c-g2
  tit-c-g3
]

turtles-own [
  partner ;the turtle to play the game with
  played ;determines if a turtle has already played the game in a given round
  memory ;a list formated in pairs of family-color, passed down to offspring
  family ;family of turtle, passed down to offspring
]

;sets up the board for a new simulation
to setup
  clear-all
  color-setup
  set density-death true
  set mutation true
  set perfect-recall false
  let x 0
  ;creates turtles on patches
  ask patches [
    set pcolor [125 50 125]
    if random 100 < density[
      sprout 1 [
        set color one-of [white black grey]
        set size 1
        set played false
        set partner 0
        set family x
        set memory (list family white)
        set x x + 1
      ]
    ]
  ]
  ;removes turtle 0 to prevent conflicts with the color black (which equals 0) in memory
  ask turtle 0 [ die ]
  updateglobals
  reset-ticks
end

;sets up the colors to be used in the simulation
to color-setup
  ;all colors can be changed except ones ending in g0

  set alt-c-g0 white
  set alt-c-g1 [255 200 200]
  set alt-c-g2 [200 255 200]
  set alt-c-g3 [200 200 255]

  set ego-c-g0  black
  set ego-c-g1 [80 0 0]
  set ego-c-g2 [0 80 0]
  set ego-c-g3 [0 0 80]

  set tit-c-g0 grey
  set tit-c-g1 [255 0 0]
  set tit-c-g2 [0 255 0]
  set tit-c-g3 [0 0 255]
end

;seperates g0 turtles into one of three groups randomly
to seperategroups
  ask turtles[
    let group random 3
    if black = color[
      (ifelse
        group = 0[ set color ego-c-g1 ]
        group = 1[ set color ego-c-g2 ]
        group = 2[ set color ego-c-g3 ]
      )
    ]
    if white = color[
      (ifelse
        group = 0[ set color alt-c-g1 ]
        group = 1[ set color alt-c-g2 ]
        group = 2[ set color alt-c-g3 ]
      )
    ]
    if grey = color[
      (ifelse
        group = 0[ set color tit-c-g1 ]
        group = 1[ set color tit-c-g2 ]
        group = 2[ set color tit-c-g3 ]
      )
    ]
  ]
end

;combines g1, g2, and g3 turtles back into one g0 group
to combine
  ask turtles[
    (ifelse
      color = ego-c-g1 [ set color black ]
      color = ego-c-g2 [ set color black ]
      color = ego-c-g3 [ set color black ]
      color = alt-c-g1 [ set color white ]
      color = alt-c-g2 [ set color white ]
      color = alt-c-g3 [ set color white ]
      color = tit-c-g1 [ set color grey ]
      color = tit-c-g2 [ set color grey ]
      color = tit-c-g3 [ set color grey ]
    )
    set played false
    set partner 0
  ]
  breakup
end

;makes all turtles have no partner
to breakup
  ask turtles[
    set partner 0
  ]
end

;plays a round
to play
  ;finds a partner for a turtle within their group for all turtles
  ask turtles[
    (ifelse
      color = ego-c-g0 [pair ego-c-g0 alt-c-g0 tit-c-g0]
      color = alt-c-g0 [pair ego-c-g0 alt-c-g0 tit-c-g0]
      color = tit-c-g0 [pair ego-c-g0 alt-c-g0 tit-c-g0]

      color = ego-c-g1 [pair ego-c-g1 alt-c-g1 tit-c-g1]
      color = alt-c-g1 [pair ego-c-g1 alt-c-g1 tit-c-g1]
      color = tit-c-g1 [pair ego-c-g1 alt-c-g1 tit-c-g1]

      color = ego-c-g2 [pair ego-c-g2 alt-c-g2 tit-c-g2]
      color = alt-c-g2 [pair ego-c-g2 alt-c-g2 tit-c-g2]
      color = tit-c-g2 [pair ego-c-g2 alt-c-g2 tit-c-g2]

      color = ego-c-g3 [pair ego-c-g3 alt-c-g3 tit-c-g3]
      color = alt-c-g3 [pair ego-c-g3 alt-c-g3 tit-c-g3]
      color = tit-c-g3 [pair ego-c-g3 alt-c-g3 tit-c-g3]
    )
  ]
  ;ask turtles who have not played this round to play
  ask turtles [
    if played = false [
      play-payoffs self partner
    ]
  ]
end

;pairs turtles with c1 or c2 or c3 together
to pair [c1 c2 c3]
  ask turtles with [(color = c1) or (color = c2) or (color = c3)][
    if partner = 0 [
      ;finds a another turtle within the group who does not has a partner
      set partner one-of other turtles with [(partner = 0) and ((color = c1) or (color = c2) or (color = c3))]
      (ifelse
        partner != nobody [
          ask partner [
            set partner myself
          ]
        ]
        partner = 0 [ set partner nobody ]
      )
    ]
  ]
end

;plays a round between turtle p1 and turtle p2
to play-payoffs [p1 p2]
  if p2 != nobody and is-turtle? p2 [
    let c1 [color] of p1
    (ifelse
      c1 = alt-c-g0 or c1 =  alt-c-g1 or c1 = alt-c-g2 or c1 = alt-c-g3 [ altplay p1 p2 ]
      c1 = ego-c-g0 or c1 =  ego-c-g1 or c1 = ego-c-g2 or c1 = ego-c-g3 [ egoplay p1 p2 ]
      c1 = tit-c-g0 or c1 =  tit-c-g1 or c1 = tit-c-g2 or c1 = tit-c-g3 [ titplay p1 p2 ]
    )
  ]
  ;sets that both players, if they still exist, have played the game
  if p2 != nobody and is-turtle? p2 [ ask p2 [ set played true ]]
  if p1 != nobody and is-turtle? p1 [ ask p1 [ set played true ]]
end

;plays a round between an altruist and another turtle
to altplay [alt part]
  let c2 [color] of part
  (ifelse
    ;the partner is an altruist
    c2 = alt-c-g0 or c2 =  alt-c-g1 or c2 = alt-c-g2 or c2 = alt-c-g3 [
      same-play alt part a/a-pay
    ]
    ;the partner is an egoist
    c2 = ego-c-g0 or c2 =  ego-c-g1 or c2 = ego-c-g2 or c2 = ego-c-g3 [
      diff-play alt part a/e-pay e/a-pay
    ]
    ;the partner is a tit-for-tat player
    c2 = tit-c-g0 or c2 =  tit-c-g1 or c2 = tit-c-g2 or c2 = tit-c-g3 [
      ask part [
        ;gets the color/strategy the tit-for-tat player will play
        let true-color recall-move part alt
        (ifelse
          true-color = white [
            same-play alt part a/a-pay
          ]
          true-color = black [
            diff-play alt part a/e-pay e/a-pay
          ]
        )
        ;updates the memory of the tit-for-tat player
        update-memory part alt white
      ]
    ]
  )
end

;plays a round between an egoist and another turtle
to egoplay [ego part]
  let c2 [color] of part
  (ifelse
    ;the partner is an altruist
    c2 = alt-c-g0 or c2 =  alt-c-g1 or c2 = alt-c-g2 or c2 = alt-c-g3 [
      diff-play ego part e/a-pay a/e-pay
    ]
    ;the partner is an egoist
    c2 = ego-c-g0 or c2 =  ego-c-g1 or c2 = ego-c-g2 or c2 = ego-c-g3 [
      same-play ego part e/e-pay
    ]
    ;the partner is a tit-for-tat player
    c2 = tit-c-g0 or c2 =  tit-c-g1 or c2 = tit-c-g2 or c2 = tit-c-g3 [
      ask part [
        ;gets the color/strategy that the tit-for-tat player will play
        let true-color recall-move part ego
        (ifelse
          true-color = white [
            diff-play ego part e/a-pay a/e-pay
          ]
          true-color = black [
            same-play ego part e/e-pay
          ]
        )
        ;updates the memory of the tit-for-tat player
        update-memory part ego black
      ]
    ]
  )
end

;plays a round between a tit-for-tat player and another turtle
to titplay [tit part]
  let c2 [color] of part
  ;gets the color/strategy that the tit-for-tat player will play
  let true-color recall-move tit part
  (ifelse
    ;the partner is an altruist
    c2 = alt-c-g0 or c2 =  alt-c-g1 or c2 = alt-c-g2 or c2 = alt-c-g3 [
      (ifelse
        true-color = white [
          same-play tit part a/a-pay
        ]
        true-color = black [
          diff-play tit part e/a-pay a/e-pay
        ]
      )
      ;updates the memory of the tit-for-tat player
      update-memory tit part white
    ]
    ;the partner is an egoist
    c2 = ego-c-g0 or c2 =  ego-c-g1 or c2 = ego-c-g2 or c2 = ego-c-g3 [
      (ifelse
        true-color = black [
          same-play tit part e/e-pay
        ]
        true-color = white [
          diff-play tit part a/e-pay e/a-pay
        ]
      )
      ;updates the memory of the tit-for-tat player
      update-memory tit part black
    ]
    ;the partner is a tit-for-tat player
    c2 = tit-c-g0 or c2 =  tit-c-g1 or c2 = tit-c-g2 or c2 = tit-c-g3 [
      ask part [
        ;gets the color/strategy that the tit-for-tat player (the partner) will play
        let true-color-part recall-move part tit
        (ifelse
          true-color = white [
            (ifelse
              ;the partner plays like an egoist
              true-color-part = black [
                diff-play tit part a/e-pay e/a-pay
                ;updates the memory of both tit-for-tat-players
                update-memory tit part black
                update-memory part tit white
              ]
              ;the partner plays like an altruist
              true-color-part = white [
                same-play tit part a/a-pay
                ;updates the memory of both tit-for-tat-players
                update-memory tit part white
                update-memory part tit white
              ]
            )
          ]
          true-color = black [
            (ifelse
              ;the partner plays like an egoist
              true-color-part = black [
                same-play tit part e/e-pay
                update-memory tit part black
                update-memory part tit black
              ]
              ;the partner plays like an altruist
              true-color-part = white [
                diff-play tit part e/a-pay e/a-pay
                update-memory tit part white
                update-memory part tit black
              ]
            )
          ]
        )
      ]
    ]
  )
end

;plays a round between two players that have the same strategy
to same-play [p1 p2 same-pay]
  (ifelse
    same-pay > 0 [
      ask p1  [ maketurtles color patch-here same-pay family memory]
      ask p2  [ maketurtles color patch-here same-pay family memory]
    ]
    ;if the payoff is less than 0, the turtle dies
    same-pay < 0 [
      ask p1 [die]
      ask p2 [die]
    ]
  )
end

;plays a round between two players that have different strategies
;inputs for payoffs (last two) go p1 vs p2 payoff then p2 vs p1 payoff
to diff-play [p1 p2 diff-pay-p1/p2 diff-pay-p2/p1]
  (ifelse
    diff-pay-p1/p2 > 0 [
      ask p1 [ maketurtles color patch-here diff-pay-p1/p2 family memory]
      (ifelse
        diff-pay-p2/p1 > 0 [ ask p2 [ maketurtles color patch-here diff-pay-p2/p1 family memory] ]
        ;if the payoff is less than 0, the turtle dies
        diff-pay-p2/p1 < 0 [ ask p2 [die] ]
      )
    ]
    ;if the payoff is less than 0, the turtle dies
    diff-pay-p1/p2 < 0 [
      ask p1 [die]
      (ifelse
        diff-pay-p2/p1 > 0 [ ask p2 [ maketurtles color patch-here diff-pay-p2/p1 family memory] ]
        ;if the payoff is less than 0, the turtle dies
        diff-pay-p2/p1 < 0 [ ask p2 [die] ]
      )
    ]
  )
end

;given a tit-for-tat player and its partner, returns the appropriate strategy of the tit-for-tat player
to-report recall-move [tit part]
  let return green
  let f [family] of part
  ask tit[
    (ifelse
      ;checks if the tit-for-tat player remembers playing the partner
      member? f memory [
        set return item (1 + position family memory) memory
      ]
      not member? f memory [
        (ifelse
          perfect-recall = true [
            set return item (length memory - 1) memory
          ]
          perfect-recall = false [
            let s (proportion memory) * 100
            let r random 100
            (ifelse
              r <= s [set return white]
              r > s  [set return black]
            )
          ]
        )
      ]
    )
  ]
  report return
end

;only run when tit-for-tat player meets a new player not in his memory
;determines the probability a tit-for-tat player plays and egoist strategy based on his memory
;probability: 1 - (proportion-strength / 100) * percent of egoist in memory
to-report proportion [los]
  let alt 0
  let ego 0
  let p 0
  foreach los [
    (ifelse
      p mod 2 = 1 [
        (ifelse
          item p los = ego-c-g0 [set ego 1 + ego]
          item p los = alt-c-g0 [set alt 1 + alt]

          item p los = ego-c-g1 [set ego 1 + ego]
          item p los = alt-c-g1 [set alt 1 + alt]

          item p los = ego-c-g2 [set ego 1 + ego]
          item p los = alt-c-g2 [set alt 1 + alt]

          item p los = ego-c-g3 [set ego 1 + ego]
          item p los = alt-c-g3 [set alt 1 + alt]
        )
      ]
    )
    set p p + 1
  ]
  report 1 - (proportion-strength / 100) * (ego / (alt + ego))
end

;updates a tit-for-tat player's memory with the partner and the strategy of the partner
to update-memory [tit part c]
  let f [family] of part
  ask tit [
    (ifelse
      member? f memory [
        set memory replace-item (1 + position f memory) memory c
      ]
      not member? f memory [
        set memory lput f memory
        set memory lput c memory
      ]
    )
  ]
end

;moves the turtles randomly
to move
  ask turtles [
    right random 360
    fd 1
  ]
  tick
end

;makes a turtle with a set color (c), family (f), and memory (m)
to maketurtle [c f m]
  sprout 1 [
    set color c
    set family f
    set size 1
    set played true
    set partner 0
    set memory m
  ]
end

;makes a set number of turtles (r) on a given patch (p)
;all turtles have made will have the color (c), the family (f), and the memory (m)
to maketurtles [c p r f m]
  ask p [
    repeat r [
      maketurtle c f m
    ]
  ]
  ask turtles-on p[
    right random 360
    fd 1
  ]
end

;readies a simulation for the next round of games
to nextround
  ;resets the turtles
  ask turtles[
    set played false
  ]
  ;mutates the turtles
  if mutation [
    ask turtles[
      let r random 100
      if r < mutation-rate [
        set color one-of [black white grey]
      ]
    ]
  ]
end

;updates the global variables
to updateglobals
  let t count turtles
  let alt count turtles with [color = alt-c-g0 or color = alt-c-g1 or color = alt-c-g2 or color = alt-c-g3]
  let ego count turtles with [color = ego-c-g0 or color = ego-c-g1 or color = ego-c-g2 or color = ego-c-g3]
  let tit count turtles with [color = tit-c-g0 or color = tit-c-g1 or color = tit-c-g2 or color = tit-c-g3]
  (ifelse
    t = 0 [
      set percent-altruist alt / 1
      set percent-egoist ego / 1
      set percent-tit tit / 1
    ]
    t != 0[
      set percent-altruist alt / t
      set percent-egoist ego / t
      set percent-tit tit / t
    ]
  )
end

;plays a game with only one group
to play-black-white
  if count turtles >= densitylimit or count turtles = 0 [stop]
  play
  nextround
  breakup
  grimreaper
  updateglobals
  tick
end

;plays a game with three groups
to play-groups
  if count turtles >= densitylimit or count turtles = 0 [stop]
  seperategroups
  play
  nextround
  breakup
  grimreaper
  updateglobals
  tick
end

;plays a single round
to play-round
  play
  nextround
  breakup
  grimreaper
  updateglobals
  tick
end

;handles the population
to grimreaper
  (ifelse
    ;death rate dependent on the relative density
    density-death = true [
      ask turtles[
        if random 100 < density-death-strength * (1 - ( (density / 100) - (count turtles / count patches)))[ die ]
      ]
    ]
    ;death rate is a set probability
    density-death = false [
      ask turtles[
        if random 100 < death-rate [ die ]
      ]
    ]
  )
end

;switches on and off density dependent death
to toggle-density-death
  (ifelse
    density-death = true [
      set density-death false
    ]
    density-death = false [
      set density-death true
    ]
  )
end

;switches on and off mutation
to toggle-mutation
  (ifelse
    mutation = true [
      set mutation false
    ]
    mutation = false [
      set mutation true
    ]
  )
end

;switches on and off perfect recall
to toggle-perfect-recall
  (ifelse
    perfect-recall = true [
      set perfect-recall false
    ]
    perfect-recall = false [
      set perfect-recall true
    ]
  )
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
336
337
-1
-1
8.0
1
10
1
1
1
0
1
1
1
-20
20
-20
20
0
0
1
1
1
ticks
30.0

BUTTON
325
210
405
243
setup
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
325
245
440
278
NIL
seperategroups
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
325
280
402
313
NIL
combine
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
515
370
687
403
density
density
0
100
54.0
1
1
NIL
HORIZONTAL

SLIDER
625
105
797
138
e/a-pay
e/a-pay
-1
10
3.0
1
1
NIL
HORIZONTAL

SLIDER
625
150
797
183
e/e-pay
e/e-pay
-1
10
1.0
1
1
NIL
HORIZONTAL

SLIDER
625
195
797
228
a/a-pay
a/a-pay
-1
10
2.0
1
1
NIL
HORIZONTAL

SLIDER
625
240
797
273
a/e-pay
a/e-pay
-1
10
0.0
1
1
NIL
HORIZONTAL

BUTTON
445
245
562
278
NIL
play-black-white
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
705
370
877
403
densitylimit
densitylimit
0
10000
5066.0
1
1
NIL
HORIZONTAL

BUTTON
445
280
542
313
NIL
play-groups
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
445
210
537
243
NIL
play-round
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

MONITOR
800
105
922
150
Ego vs Altru Payout
e/a-pay - a/e-pay
17
1
11

MONITOR
800
195
927
240
Altru vs Altru Payout
a/a-pay + a/a-pay
17
1
11

MONITOR
800
150
922
195
Altru vs Ego Payout
a/e-pay - e/a-pay
17
1
11

MONITOR
800
240
917
285
Ego vs Ego Payout
e/e-pay + e/e-pay
17
1
11

SLIDER
705
415
877
448
death-rate
death-rate
0
100
62.0
1
1
NIL
HORIZONTAL

BUTTON
515
405
662
438
NIL
toggle-density-death
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

MONITOR
515
440
602
485
density-death
density-death
17
1
11

SLIDER
515
485
692
518
density-death-strength
density-death-strength
0
100
64.0
1
1
NIL
HORIZONTAL

BUTTON
705
460
822
493
NIL
toggle-mutation\n
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

MONITOR
705
495
767
540
NIL
mutation
17
1
11

SLIDER
705
540
877
573
mutation-rate
mutation-rate
0
100
0.0
1
1
NIL
HORIZONTAL

SLIDER
330
485
502
518
proportion-strength
proportion-strength
0
100
31.0
1
1
NIL
HORIZONTAL

BUTTON
330
405
472
438
NIL
toggle-perfect-recall
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

MONITOR
330
440
417
485
NIL
perfect-recall
17
1
11

@#$#@#$#@
## WHAT IS IT?

This projecty models two player games across a populution. The model allows for three types of players: altruists, egoists, and tit-for-tat players. Altuists and egoists stick to their repsective strategies. Tit-for-tat players have a memory, and update their strategy based on the game so far and the player they are playing. Each round, players play the game within their group. Some players randomly die, and we proceed to the next round. After several rounds, the simluation attempts to show evolutionary stable strategies.

The simulation also allows for mutation. With it on, each player has a user set chance to mutate (switch strategy).

This project was inspired by Axelrod and Hamiliton and their writings on tit-for-tat as an evolutionary stable strategy.
## HOW TO USE IT

Click the SETUP button to set up the agents. There are approximately equal numbers of orange and blue agents. The agents are set up so no patch has more than one agent.  Click GO to start the simulation. If agents don't have enough same-color neighbors, they move to a nearby patch. (The topology is wrapping, so that patches on the bottom edge are neighbors with patches on the top and similar for left and right).

The DENSITY slider controls the occupancy density of the neighborhood (and thus the total number of agents). (It takes effect the next time you click SETUP.)  The %-SIMILAR-WANTED slider controls the percentage of same-color agents that each agent wants among its neighbors. For example, if the slider is set at 30, each blue agent wants at least 30% of its neighbors to be blue agents.

The % SIMILAR monitor shows the average percentage of same-color neighbors for each agent. It starts at about 50%, since each agent starts (on average) with an equal number of orange and blue agents as neighbors. The NUM-UNHAPPY monitor shows the number of unhappy agents, and the % UNHAPPY monitor shows the percent of agents that have fewer same-color neighbors than they want (and thus want to move). The % SIMILAR and the NUM-UNHAPPY monitors are also plotted.

The VISUALIZATION chooser gives two options for visualizing the agents. The OLD option uses the visualization that was used by the segregation model in the past. The SQUARE-X option visualizes the agents as squares. Unhappy agents are visualized as Xs.

## THINGS TO NOTICE

When you execute SETUP, the orange and blue agents are randomly distributed throughout the neighborhood. But many agents are "unhappy" since they don't have enough same-color neighbors. The unhappy agents move to new locations in the vicinity. But in the new locations, they might tip the balance of the local population, prompting other agents to leave. If a few  agents move into an area, the local blue agents might leave. But when the blue agents move to a new area, they might prompt orange agents to leave that area.

Over time, the number of unhappy agents decreases. But the neighborhood becomes more segregated, with clusters of orange agents and clusters of blue agents.

In the case where each agent wants at least 30% same-color neighbors, the agents end up with (on average) 70% same-color neighbors. So relatively small individual preferences can lead to significant overall segregation.

## THINGS TO TRY

Try different values for %-SIMILAR-WANTED. How does the overall degree of segregation change?

If each agent wants at least 40% same-color neighbors, what percentage (on average) do they end up with?

Try different values of DENSITY. How does the initial occupancy density affect the percentage of unhappy agents? How does it affect the time it takes for the model to finish?

Can you set sliders so that the model never finishes running, and agents keep looking for new locations?

## EXTENDING THE MODEL

The `find-new-spot` procedure has the agents move locally till they find a spot. Can you rewrite this procedure so the agents move directly to an appropriate new spot?

Incorporate social networks into this model.  For instance, have unhappy agents decide on a new location based on information about what a neighborhood is like from other agents in their network.

Change the rules for agent happiness.  One idea: suppose that the agents need some minimum threshold of "good neighbors" to be happy with their location.  Suppose further that they don't always know if someone makes a good neighbor. When they do, they use that information.  When they don't, they use color as a proxy -- i.e., they assume that agents of the same color make good neighbors.

The two different visualizations emphasize different aspects of the model. The SQUARE-X visualization shows whether an agent is happy or not. Can you design a different visualization that emphasizes different aspects?

## NETLOGO FEATURES

`sprout` is used to create agents while ensuring no patch has more than one agent on it.

When an agent moves, `move-to` is used to move the agent to the center of the patch it eventually finds.

Note two different methods that can be used for find-new-spot, one of them (the one we use) is recursive.


<!-- 1997 2001 -->
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

face-happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

person2
false
0
Circle -7500403 true true 105 0 90
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 285 180 255 210 165 105
Polygon -7500403 true true 105 90 15 180 60 195 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

square
false
0
Rectangle -7500403 true true 30 30 270 270

square - happy
false
0
Rectangle -7500403 true true 30 30 270 270
Polygon -16777216 false false 75 195 105 240 180 240 210 195 75 195

square - unhappy
false
0
Rectangle -7500403 true true 30 30 270 270
Polygon -16777216 false false 60 225 105 180 195 180 240 225 75 225

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

square-small
false
0
Rectangle -7500403 true true 45 45 255 255

square-x
false
0
Rectangle -7500403 true true 30 30 270 270
Line -16777216 false 75 90 210 210
Line -16777216 false 210 90 75 210

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 0 0 0 300 300 300 30 30

triangle2
false
0
Polygon -7500403 true true 150 0 0 300 300 300

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

x
false
0
Polygon -7500403 true true 300 60 225 0 0 225 60 300
Polygon -7500403 true true 0 60 75 0 300 240 225 300
@#$#@#$#@
NetLogo 3D 6.1.1
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
1
@#$#@#$#@
